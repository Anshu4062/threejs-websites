import * as _babel_core from '@babel/core';
import * as _vite from 'vite';
import * as _rollup from 'rollup';
import * as _unplugin from 'unplugin';

interface Options {
    /**
     * Include or exclude files from compilation.
     * @property {string|RegExp|Array<string|RegExp>} [filter.include] - RegExp, glob pattern or array of them to include in compilation.
     * @property {string|RegExp|Array<string|RegExp>} [filter.exclude] - RegExp, glob pattern or array of them to exclude from compilation.
     */
    filter?: {
        include?: string | RegExp | Array<string | RegExp>;
        exclude?: string | RegExp | Array<string | RegExp>;
    };
    /**
     * Enable or disable telemetry.
     * https://million.dev/docs/code-policy
     */
    telemetry?: boolean;
    /**
     * Enable or disable RSC (React Server Components).
     */
    rsc?: boolean;
    /**
     * Enable or disable legacy HMR (Hot Module Replacement).
     */
    legacyHmr?: boolean;
    /**
     * Skip transforming files (use this if you use a webpack loader)
     */
    skipTransform?: boolean;
    /**
     * Log debug information
     */
    dev?: "debug" | boolean;
    stats?: {
        components: number;
        captures: number;
    };
    babel?: {
        plugins: Array<babel.PluginItem>;
    };
    framework?: string;
    optimizeDOM?: boolean;
    apiKey?: string;
    ingest?: {
        host?: string;
        port?: number;
        ignoreMatching?: boolean;
    };
    runtimeURL?: string;
    test?: boolean;
    proxy?: {
        enabled: boolean;
        url?: string;
        password?: string;
    };
}
interface BabelOptions extends Options {
    source?: string;
    isJSX?: boolean;
    filename?: string;
    absoluteFilename?: string;
}

declare const esbuild: (options?: Options | undefined) => _unplugin.EsbuildPlugin;
declare const rollup: (options?: Options | undefined) => _rollup.Plugin<any> | _rollup.Plugin<any>[];
declare const vite: (options?: Options | undefined) => _vite.Plugin<any> | _vite.Plugin<any>[];
declare const next: (options?: Options) => (nextConfig?: any) => any;
declare const unplugin: _unplugin.UnpluginInstance<Options | undefined, boolean>;
declare const craco: (options: Options) => {
    options: Options;
    plugin: {
        overrideWebpackConfig: ({ webpackConfig, pluginOptions }: any) => any;
        overrideDevServerConfig: ({ devServerConfig }: any) => any;
    };
};
declare const astro: (options?: Options) => {
    name: string;
    hooks: {
        "astro:config:setup": (astro: any) => void;
    };
};
declare const babel$1: (_: unknown, options?: BabelOptions) => _babel_core.PluginObj<_babel_core.PluginPass>;
declare const rspack: (options?: Options | undefined) => _rollup.Plugin<any> | _rollup.Plugin<any>[];
declare const webpack: (options?: Options | undefined) => WebpackPluginInstance;
declare const rewire: (config: any, _env: unknown, options: Options) => any;
declare const _default: {
    vite: (options?: Options | undefined) => _vite.Plugin<any> | _vite.Plugin<any>[];
    rollup: (options?: Options | undefined) => _rollup.Plugin<any> | _rollup.Plugin<any>[];
    esbuild: (options?: Options | undefined) => _unplugin.EsbuildPlugin;
    next: (options?: Options) => (nextConfig?: any) => any;
    unplugin: _unplugin.UnpluginInstance<Options | undefined, boolean>;
    craco: (options: Options) => {
        options: Options;
        plugin: {
            overrideWebpackConfig: ({ webpackConfig, pluginOptions }: any) => any;
            overrideDevServerConfig: ({ devServerConfig }: any) => any;
        };
    };
    astro: (options?: Options) => {
        name: string;
        hooks: {
            "astro:config:setup": (astro: any) => void;
        };
    };
    babel: (_: unknown, options?: BabelOptions) => _babel_core.PluginObj<_babel_core.PluginPass>;
    rspack: (options?: Options | undefined) => _rollup.Plugin<any> | _rollup.Plugin<any>[];
    webpack: (options?: Options | undefined) => WebpackPluginInstance;
    rewire: (config: any, _env: unknown, options: Options) => any;
};

export { astro, babel$1 as babel, craco, _default as default, esbuild, next, rewire, rollup, rspack, unplugin, vite, webpack };
